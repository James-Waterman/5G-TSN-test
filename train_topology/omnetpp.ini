[General]
############### General PHY parameters ##############
#**.downlink_interference = true
#**.uplink_interference = true
#**.ueTxPower = 26
#**.eNodeBTxPower = 46
#**.targetBler = 0.01
#**.blerShift = 5  
#**.fbPeriod = 40   # reports CQI every 40ms

[Config test1]
network = TrainTopology

#*.carrierAggregation.componentCarrier[*].numBands = 6

sim-time-limit = 15.0s
*.gnb*.numX2Apps = 1                                        # one x2App per peering node
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0" 
*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0" 
*.server.ipv4.routingTable.routingFile = "server.mrt"
*.*.dstt.DSTT.destAddress = "server"
*.*Ue[0].masterId = 0
*.*Ue[0].nrMacCellId = 1
*.*Ue[0].nrMasterId = 1
*.*Ue[1].masterId = 0
*.*Ue[1].nrMacCellId = 1
*.*Ue[1].nrMasterId = 1
*.*Ue[2].masterId = 0
*.*Ue[2].nrMacCellId = 1
*.*Ue[2].nrMasterId = 2
*.*Ue[3].masterId = 0
*.*Ue[3].nrMacCellId = 1
*.*Ue[3].nrMasterId = 2

#*.gnb*.cellularNic.rlc.um.queueSize = 1024MiB

#
#**.dynamicCellAssociation = true
#**.enableHandover = true
*.switch3.macTable.forwardingTable = [{address:"0A-AA-00-00-00-01", interface:"eth2"}]
#*.T*Client*.numApps = 1
#*.T*Client*.app[0].typename = "UdpBasicApp"
#*.T*Client*.app[0].display-name = "besteffort"
#*.T*Client*.app[0].destAddresses = "server"
#*.T*Client*.app[0].destPort = 1000
#*.T*Client*.app[0].localPort = 1000
#*.T*Client*.app[0].messageLength = 20B
#*.T*Client*.app[0].sendInterval = 0.03s
#*.T*Client*.app[0].startTime = 0.1s
#*.T*Client*.app[0].stopTime = 1.1s#uniform(100ms,200ms)
#*.B*Client*.numApps = 1
#*.B*Client*.app[0].typename = "UdpBasicApp"
#*.B*Client*.app[0].display-name = "video"
#*.B*Client*.app[0].destAddresses = "server"
#*.B*Client*.app[0].destPort = 1001
#*.B*Client*.app[0].localPort = 1000
#*.B*Client*.app[0].messageLength = 30B
#*.B*Client*.app[0].sendInterval = 0.02s
#*.B*Client*.app[0].startTime = 0.2s
#*.B*Client*.app[0].stopTime = 10s
#
#*.server.numApps = 3
#*.server.app[0].typename = "UdpSinkApp"
#*.server.app[1].typename = "UdpSinkApp"
#*.server.app[0].display-name = "besteffort"
#*.server.app[1].display-name = "video"
#*.server.app[0].io.localPort = 1000
#*.server.app[1].io.localPort = 1001

*.TCUClient[0].numApps = 2
*.TCUClient[1..3].numApps = 1
*.TCUClient*.app[0].typename = "UdpSink"
*.TCUClient*.app[0].localPort = 1001

*.TCUClient[0].app[1].typename = "UdpBasicApp"
*.TCUClient[0].app[1].display-name = "group"
*.TCUClient[0].app[1].sendInterval = 0.1s
*.TCUClient[0].app[1].startTime = 0.1s
*.TCUClient[0].app[1].messageLength = 30B
*.TCUClient[0].app[1].destAddresses = "server"
*.TCUClient[0].app[1].packetName = "224.0.1.1"
*.TCUClient[0].app[1].destPort = 1001
*.TCUClient[0].app[1].localPort = 1000

#*.configurator.config = xmldoc("./config.xml")
*.server.numApps = 1
*.server.app[0].typename = "UdpGroupManagement"
*.server.app[0].localPort = 1001
*.server.app[0].destPort = 1001
*.server.app[0].destAddresses = "10.0.0.45 10.0.0.49 10.0.0.53 10.0.0.57"
*.server.app[0].messageLength = 30B
#*.server.app[0].sendInterval = 0.001s

*.*.hasOutgoingStreams = true
*.*.hasIncomingStreams = true
# client stream identification
*.*Client*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)},
															{stream: "group"}]

# client stream encoding
*.*Client*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

*.server.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
*.server.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

# switch stream decoding
*.switch*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "besteffort"},
                                                 {pcp: 4, stream: "video"}]
# switch stream eccoding
*.switch*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

*.switch*.hasIngressTrafficFiltering = true
# per-stream filtering for video stream
*.switch*.bridging.streamFilter.ingress.typename = "SimpleIeee8021qFilter"
*.switch*.bridging.streamFilter.ingress.numStreams = 2
*.switch*.bridging.streamFilter.ingress.classifier.mapping = {besteffort: 0, video: 1}
*.switch*.bridging.streamFilter.ingress.*[0].display-name = "besteffort"
*.switch*.bridging.streamFilter.ingress.*[1].display-name = "video"
*.switch*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.switch*.bridging.streamFilter.ingress.meter[*].committedInformationRate = 20Mbps
*.switch*.bridging.streamFilter.ingress.meter[*].committedBurstSize = 10kB
*.switch*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"
#
#
#
# enable egress traffic shaping
*.switch*.hasEgressTrafficShaping = true
*.switch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
# credit-based and asynchronous traffic shaping
*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch*.eth[*].macLayer.queue.*[0].display-name = "besteffort"
*.switch*.eth[*].macLayer.queue.*[1].display-name = "video"
*.switch*.eth[*].macLayer.queue.queue[0].typename = "EligibilityTimeQueue"
*.switch*.eth[*].macLayer.queue.queue[1].typename = "EligibilityTimeQueue"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].typename = "Ieee8021qAsynchronousShaper"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].idleSlope = 42.68Mbps
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].typename = "Ieee8021qAsynchronousShaper"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 21.34Mbps


[Config test2]
network = MultiCell_Standalone2
############### X2 configuration #################
*.gnb*.numX2Apps = 1                                        # one x2App per peering node
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0"
*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.*.dstt.destAddress = "server"
*.*Ue[*].masterId = 0
*.*Ue[0].nrMasterId = 1
*.*Ue[1].nrMasterId = 1
*.*Ue[2].nrMasterId = 2
*.*Ue[3].nrMasterId = 2

##============= Application Setup =============
*.server.app[*].typename = "CbrReceiver"
*.server.app[*].localPort = 3000 + ancestorIndex(0)
*.*Ue[*].mobility.typename = ""
*.*Ue[*].app[*].typename = "CbrSender"
*.*Ue[*].app[*].PacketSize = 100
*.*Ue[*].app[*].sampling_time = 0.02s
*.*Ue[*].app[*].destAddress = "server" 
*.*Ue[*].app[*].destPort = 3000 + ancestorIndex(1) 
*.*Ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.*Ue[*].app[*].startTime = uniform(0s,0.02s)
*.*Ue[*].app[*].finishTime = uniform(19.9s,19.92s)
#*.configurator.config=xmldoc("./config.xml")
*.server.app[2].typename = "UdpApp"
*.server.app[2].display-name = "video"
*.server.app[2].io.destAddress = "224.0.1.1"
*.server.app[2].io.destPort = 1002
*.server.app[2].io.localPort = 1002
*.server.app[2].source.packetLength = 10B
*.server.app[2].source.productionInterval = 5ms
*.server.app[2].source.initialProductionOffset = 2ms
*.T*Client*.app[1].typename = "UdpSinkApp"
*.T*Client*.app[1].display-name = "video"
*.T*Client*.app[1].io.localPort = 1002

#*.T*Client*.numApps = 1
#*.T*Client*.app[0].typename = "UdpApp"
#*.T*Client*.app[0].display-name = "besteffort"
#*.T*Client*.app[0].io.destAddress = "server"
#*.T*Client*.app[0].io.destPort = 1000
#*.T*Client*.app[0].io.localPort = 1000
#*.T*Client*.app[0].source.packetLength = 20B
#*.T*Client*.app[0].source.productionInterval = 20ms
#*.T*Client*.app[0].source.initialProductionOffset = 0.03s#uniform(100ms,200ms)
#
#*.B*Client*.numApps = 1
#*.B*Client*.app[0].typename = "UdpApp"
#*.B*Client*.app[0].display-name = "video"
#*.B*Client*.app[0].io.destAddress = "server"
#*.B*Client*.app[0].io.destPort = 1001
#*.B*Client*.app[0].io.localPort = 1000
#*.B*Client*.app[0].source.packetLength = 30B
#*.B*Client*.app[0].source.productionInterval = 10ms
#*.B*Client*.app[0].source.initialProductionOffset = 0.02s#uniform(100ms,200ms)
#
#*.server.numApps = 2
#*.server.app[0].typename = "UdpSinkApp"
#*.server.app[1].typename = "UdpSinkApp"
#*.server.app[0].display-name = "besteffort"
#*.server.app[1].display-name = "video"
#*.server.app[0].io.localPort = 1000
#*.server.app[1].io.localPort = 1001
#*.configurator.config=xmldoc("./config.xml")
#*.server.app[2].typename = "UdpApp"
#*.server.app[2].display-name = "video"
#*.server.app[2].io.destAddress = "224.0.1.1"
#*.server.app[2].io.destPort = 1002
#*.server.app[2].io.localPort = 1002
#*.server.app[2].source.packetLength = 10B
#*.server.app[2].source.productionInterval = 5ms
#*.server.app[2].source.initialProductionOffset = 2ms
#*.T*Client*.app[1].typename = "UdpSinkApp"
#*.T*Client*.app[1].display-name = "video"
#*.T*Client*.app[1].io.localPort = 1002

[Config test3]
network = MultiCell_Standalone
*.configurator.config = xmldoc("./config.xml")
*.ue[*].mobility.typename = ""
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1
**.dynamicCellAssociation = true
**.enableHandover = true

*.ue[1..7].numApps = 1
*.ue[0].numApps = 2
*.ue[*].app[0].typename = "UdpSink"
*.ue[*].app[0].localPort = 3001
*.ue[0].app[1].typename = "UdpBasicApp"
*.ue[0].app[1].sendInterval = 0.01s
*.ue[0].app[1].startTime = 0.01s
*.ue[0].app[1].messageLength = 100B
*.ue[0].app[1].destAddresses = "224.0.1.1"
*.ue[0].app[1].destPort = 3000
*.server.numApps = 1

*.server.app[0].typename = "UdpGroupManagement"
*.server.app[0].localPort = 3000
*.server.app[0].localAddress = "224.0.1.1"
#*.server.app[*].destAddresses = "10.0.0.35 10.0.0.36 10.0.0.37 10.0.0.38 10.0.0.39 10.0.0.40"
#*.server.app[*].messageLength = 10B
#*.server.app[*].destPort = 3000
#*.server.app[*].sendInterval = 0.001s
#*.server.app[*].startTime = 0.01s
#*.server.app[*].source.packetLength = 100B
#*.server.app[*].source.productionInterval = 0.02s
#*.server.app[0].io.destAddress = "224.0.1.1"
#*.server.app[0].io.destPort = 3000
#*.server.app[0].io.localPort = 3088 + ancestorIndex(0)
#
#*.*.hasOutgoingStreams = true
#*.*.hasIncomingStreams = true
## client stream identification
#*.*Client*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
#															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
#
## client stream encoding
#*.*Client*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
#													{stream: "video", pcp: 4}]
#
#*.server.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
#															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
#*.server.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
#													{stream: "video", pcp: 4}]
#
## switch stream decoding
#*.switch*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "besteffort"},
#                                                 {pcp: 4, stream: "video"}]
## switch stream eccoding
#*.switch*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
#													{stream: "video", pcp: 4}]
#
#*.switch*.hasIngressTrafficFiltering = true
## per-stream filtering for video stream
#*.switch*.bridging.streamFilter.ingress.typename = "SimpleIeee8021qFilter"
#*.switch*.bridging.streamFilter.ingress.numStreams = 2
#*.switch*.bridging.streamFilter.ingress.classifier.mapping = {besteffort: 0, video: 1}
#*.switch*.bridging.streamFilter.ingress.*[0].display-name = "besteffort"
#*.switch*.bridging.streamFilter.ingress.*[1].display-name = "video"
#*.switch*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
#*.switch*.bridging.streamFilter.ingress.meter[*].committedInformationRate = 20Mbps
#*.switch*.bridging.streamFilter.ingress.meter[*].committedBurstSize = 10kB
#*.switch*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"
#
#
#
## enable egress traffic shaping
#*.switch*.hasEgressTrafficShaping = true
#*.switch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
## credit-based and asynchronous traffic shaping
#*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
#*.switch*.eth[*].macLayer.queue.*[0].display-name = "besteffort"
#*.switch*.eth[*].macLayer.queue.*[1].display-name = "video"
#*.switch*.eth[*].macLayer.queue.queue[0].typename = "EligibilityTimeQueue"
#*.switch*.eth[*].macLayer.queue.queue[1].typename = "EligibilityTimeQueue"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].typename = "Ieee8021qAsynchronousShaper"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].idleSlope = 42.68Mbps
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].typename = "Ieee8021qAsynchronousShaper"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 21.34Mbps
#

